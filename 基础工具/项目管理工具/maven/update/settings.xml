<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!--
 | This is the configuration file for Maven. It can be specified at two levels:
 |
 |  1. User Level. This settings.xml file provides configuration for a single user,
 |                 and is normally provided in ${user.home}/.m2/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -s /path/to/user/settings.xml
 |
 |  2. Global Level. This settings.xml file provides configuration for all Maven
 |                 users on a machine (assuming they're all using the same Maven
 |                 installation). It's normally provided in
 |                 ${maven.conf}/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -gs /path/to/global/settings.xml
 |
 | The sections in this sample file are intended to give you a running start at
 | getting the most out of your Maven installation. Where appropriate, the default
 | values (values used when the setting is not specified) are provided.
 |
 |-->
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <!-- localRepository 本地仓库
   | 本地存储库maven的路径将用于存储工件。
   | 默认值: ${user.home}/.m2/repository
   |
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository
  <localRepository>/path/to/local/repo</localRepository>
  -->
	<localRepository>F:\.m2\repository</localRepository>
	
  <!-- interactiveMode
   | 这将确定maven是否在需要输入时提示您。 如果设置为false，maven将使用合理的默认值（可能基于某些其他设置）来处理相关参数。
   | 默认值：true
   |
   | This will determine whether maven prompts you when it needs input. If set to false,
   | maven will use a sensible default value, perhaps based on some other setting, for
   | the parameter in question.
   |
   | Default: true
  <interactiveMode>true</interactiveMode>
  -->

  <!-- offline
   | 确定maven在执行构建时是否应尝试连接到网络。 这将对工件下载，工件部署等产生影响。
   | 默认值：false
   |
   | Determines whether maven should attempt to connect to the network when executing a build.
   | This will have an effect on artifact downloads, artifact deployment, and others.
   |
   | Default: false
  <offline>false</offline>
  -->

  <!-- pluginGroups
   | 这是在通过其前缀解析插件时，将搜索的其他组标识符的列表，即在调用诸如"mvn prefix:goal"的命令行时。
   | 如果列表中尚未包含组标识符，则Maven将自动添加组标识符"org.apache.maven.plugins"和"org.codehaus.mojo"。
   |
   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.
   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers
   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.
   |-->
  <pluginGroups>
    <!-- pluginGroup
	 | 指定用于插件查找的其他组标识符。
     | Specifies a further group identifier to use for plugin lookup.
    <pluginGroup>com.your.plugins</pluginGroup>
    -->
  </pluginGroups>

  <!-- proxies
   | 这是可以在此计算机上用于连接到网络的代理列表。 除非另有指定（通过系统属性或命令行开关），
   | 否则将使用此列表中标记为活动的第一个代理规范。
   |
   | This is a list of proxies which can be used on this machine to connect to the network.
   | Unless otherwise specified (by system property or command-line switch), the first proxy
   | specification in this list marked as active will be used.
   |-->
  <proxies>
    <!-- proxy
	 | 用于连接网络的一个代理的规范。
     | Specification for one proxy, to be used in connecting to the network.
     |
    <proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <username>proxyuser</username>
      <password>proxypass</password>
      <host>proxy.host.net</host>
      <port>80</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
    -->
	<!-- 用于 m2eclipse 的 rebuild index  方案1 -->
<!-- 
	<proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>localhost</host>
      <port>8080</port>
    </proxy>
 -->
  </proxies>

  <!-- servers
   | 这是一个身份验证profiles列表，由系统中使用的server-id键入。 
   | 要maven必须连接到远程服务器，就可以使用身份验证profiles。
   |
   | This is a list of authentication profiles, keyed by the server-id used within the system.
   | Authentication profiles can be used whenever maven must make a connection to a remote server.
   |-->
  <servers>
    <!-- server
	 | 指定连接到特定服务器时要使用的身份验证信息，由系统中的唯一名称标识（由下面的'id'属性引用）。
	 |
	 | 注意：您应该指定username/password或privateKey/passphrase，因为这些配对是一起使用的。
	 |
     | Specifies the authentication information to use when connecting to a particular server, identified by
     | a unique name within the system (referred to by the 'id' attribute below).
     |
     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are
     |       used together.
     |
    <server>
      <id>deploymentRepo</id>
      <username>repouser</username>
      <password>repopwd</password>
    </server>
    -->

    <!-- 另一个示例，使用密钥进行身份验证。
		Another sample, using keys to authenticate.
    <server>
      <id>siteServer</id>
      <privateKey>/path/to/private/key</privateKey>
      <passphrase>optional; leave empty if not used.</passphrase>
    </server>
    -->
    
	<!-- 
    <server>
    	<id>my-nexus</id>
    	<username>admin</username>
    	<password>admin321</password>
    </server>
    <server>
    	<id>nexus-releases</id>
    	<username>admin</username>
    	<password>admin321</password>
    </server>
    <server>
    	<id>nexus-snapshots</id>
    	<username>admin</username>
    	<password>admin321</password>
    </server>-->
  </servers>

  <!-- mirrors
   | 这是从远程存储库下载工件时使用的镜像列表。
   |
   | 它的工作原理如下：POM可以声明一个存储库，用于解析某些工件。 
   | 但是，此存储库有时可能会出现流量过大的问题，因此人们已将其镜像到多个位置。
   |
   | 该存储库定义将具有唯一ID，因此我们可以为该存储库创建镜像引用，以用作备用下载站点。 
   | 镜像站点将是该存储库的首选服务器。
   |
   | This is a list of mirrors to be used in downloading artifacts from remote repositories.
   |
   | It works like this: a POM may declare a repository to use in resolving certain artifacts.
   | However, this repository may have problems with heavy traffic at times, so people have mirrored
   | it to several places.
   |
   | That repository definition will have a unique id, so we can create a mirror reference for that
   | repository, to be used as an alternate download site. The mirror site will be the preferred
   | server for that repository.
   |-->
  <mirrors>
    <!-- mirror
	 | 指定一个要使用的存储库镜像站点，而不是给定的存储库。 此镜像所服务的存储库具有与此镜像的mirrorOf元素匹配的ID。
	 | IDs 用于继承和直接查找的目的，并且在镜像集之间必须是唯一的。
	 | 
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    <mirror>
      <id>mirrorId</id>
      <mirrorOf>repositoryId</mirrorOf>
      <name>Human Readable Name for this Mirror.</name>
      <url>http://my.repository.com/repo/path</url>
    </mirror>repo1.maven.org
     -->
    <!-- 用于 m2eclipse 的 rebuild index  方案1 -->

	<mirror>
		<id>nexus-aliyun-public</id>
		<mirrorOf>central</mirrorOf>
		<name>Nexus aliyun</name>
		<url>https://maven.aliyun.com/repository/public</url>
	</mirror>
	
	<!--
 	<mirror>
		<id>nexus-aliyun</id>
		<mirrorOf>central</mirrorOf>
		<name>Nexus aliyun</name>
		<url>https://maven.aliyun.com/repository/central</url>
	</mirror>
	<mirror>
		<id>nexus-aliyun-google</id>
		<mirrorOf>central</mirrorOf>
		<name>Nexus aliyun google</name>
		<url>https://maven.aliyun.com/repository/google</url>
	</mirror>
	<mirror>
		<id>nexus-aliyun-jcenter</id>
		<mirrorOf>central</mirrorOf>
		<name>Nexus aliyun jcenter</name>
		<url>https://maven.aliyun.com/repository/jcenter</url>
	</mirror>
	
	<mirror>
      <id>central-repo1</id>
      <mirrorOf>central</mirrorOf>
      <name>central repo1</name>
      <url>http://repo1.maven.org/maven2/</url>
    </mirror>

	-->
	
	<!--
	<mirror>
      <id>my-nexus</id>
      <mirrorOf>*</mirrorOf>
      <name>central repo1</name>
      <url>http://localhost:8081/repository/maven-public/</url>
    </mirror>
	
	  -->
  </mirrors>

  <!-- profiles
   | 这是一个profiles列表，可以通过各种方式激活，并可以修改构建过程。 
   | settings.xml中提供的Profiles旨在提供本地计算机特定的路径和存储库位置，以允许构建在本地环境中工作。
   |
   | 例如，如果你有一个集成测试插件 - 比如，cactus这样的 - 需要知道你的Tomcat实例的安装位置，
   | 你可以在这里提供一个变量，以便在构建过程中取消引用该变量来配置cactus插件。
   |
   | 如上所述，可以通过多种方式激活Profiles。稍后将讨论一种方法——本文档的ActiveProfiles部分（settings.xml）。
   | 另一种方法本质上依赖于对系统属性的检测，要么匹配属性的特定值，要么只测试其存在性。
   | Profiles也可以由JDK版本前缀激活，其中值“1.4”可能在JDK版本“1.4.2_07”上执行构建时激活配置文件。
   | 最后，可以直接从命令行指定活动Profiles列表。
   |
   | 注意：对于在settings.xml中定义的profiles，您只能指定工件存储库、插件存储库和自由形式的属性，以用作POM中插件的配置变量。
   | 
   | This is a list of profiles which can be activated in a variety of ways, and which can modify
   | the build process. Profiles provided in the settings.xml are intended to provide local machine-
   | specific paths and repository locations which allow the build to work in the local environment.
   |
   | For example, if you have an integration testing plugin - like cactus - that needs to know where
   | your Tomcat instance is installed, you can provide a variable here such that the variable is
   | dereferenced during the build process to configure the cactus plugin.
   |
   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles
   | section of this document (settings.xml) - will be discussed later. Another way essentially
   | relies on the detection of a system property, either matching a particular value for the property,
   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a
   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.
   | Finally, the list of active profiles can be specified directly from the command line.
   |
   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact
   |       repositories, plugin repositories, and free-form properties to be used as configuration
   |       variables for plugins in the POM.
   |
   |-->
  <profiles>
    <!-- profile
	 | 指定要使用上述的一种或多种机制激活的构建过程的一组介绍。
	 | 为了继承，以及要通过<activatedprofiles/>标签或命令行激活profiles的目的，profiles必须具有唯一的ID。
	 |
	 | profile 标识的一个被鼓励的最佳实践是对 profiles 使用一致的命名约定，
	 | 例如'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', 等。
	 | 这将使您更直观地了解引入的profiles集正在尝试完成的工作，特别是当您只有一个profile ID列表用于调试时。
	 | 
	 | 这个profile示例使用JDK版本来触发激活，并提供一个特定于JDK的repo。
	 |
	 |
     | Specifies a set of introductions to the build process, to be activated using one or more of the
     | mechanisms described above. For inheritance purposes, and to activate profiles via <activatedProfiles/>
     | or the command line, profiles have to have an ID that is unique.
     |
     | An encouraged best practice for profile identification is to use a consistent naming convention
     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.
     | This will make it more intuitive to understand what the set of introduced profiles is attempting
     | to accomplish, particularly when you only have a list of profile id's for debug.
     |
     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.
    <profile>
      <id>jdk-1.4</id>

      <activation>
        <jdk>1.4</jdk>
      </activation>

      <repositories>
        <repository>
          <id>jdk14</id>
          <name>Repository for JDK 1.4 builds</name>
          <url>http://www.myhost.com/maven/jdk14</url>
          <layout>default</layout>
          <snapshotPolicy>always</snapshotPolicy>
        </repository>
      </repositories>
    </profile>
    -->

    <!--
	 | 这是另一个profile，由系统属性'target-env'及值为'dev'激活，
	 | 它提供了Tomcat实例的特定路径。 要使用它，您的插件配置可能假设如下：
	 | 
	 | ...
	 |
	 | 注意：如果您只是想在任何人将'target-env'设置为任何内容时注入此配置，您可以在激活属性中取消<value />。
	 |
	 |
     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',
     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration
     | might hypothetically look like:
     |
     | ...
     | <plugin>
     |   <groupId>org.myco.myplugins</groupId>
     |   <artifactId>myplugin</artifactId>
     |
     |   <configuration>
     |     <tomcatLocation>${tomcatPath}</tomcatLocation>
     |   </configuration>
     | </plugin>
     | ...
     |
     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to
     |       anything, you could just leave off the <value/> inside the activation-property.
     |
    <profile>
      <id>env-dev</id>

      <activation>
        <property>
          <name>target-env</name>
          <value>dev</value>
        </property>
      </activation>

      <properties>
        <tomcatPath>/path/to/tomcat/instance</tomcatPath>
      </properties>
    </profile>
    -->
  </profiles>

  <!-- activeProfiles
   | 所有构建操作都处于活动状态的profiles列表。
   |
   | List of profiles that are active for all builds.
   |
  <activeProfiles>
    <activeProfile>alwaysActiveProfile</activeProfile>
    <activeProfile>anotherAlwaysActiveProfile</activeProfile>
  </activeProfiles>
  -->
</settings>
